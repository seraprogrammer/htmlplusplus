#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const chokidar = require("chokidar");
const colors = require("picocolors");

// Define paths
const currentDir = process.cwd(); // Get the current working directory
const pagesDir = path.join(currentDir, "pages");
const mainFilePath = path.join(currentDir, "main.html"); // Look for `main.html` in the current working directory
const outputHtmlPath = path.join(currentDir, "index.html");
const outputJsPath = path.join(currentDir, "index.js");
const outputCssPath = path.join(currentDir, "styles.css");

function log(msg) {
  console.log(`${colors.green("✔")} ${colors.cyan("[compiler]")} ${msg}`);
}

function errorLog(msg) {
  console.error(`${colors.red("✖")} ${colors.yellow("[error]")} ${msg}`);
}

function startAnimation() {
  const frames = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"];
  let i = 0;
  return setInterval(() => {
    process.stdout.write(`\r${frames[i]} ${colors.magenta("Compiling...")}`);
    i = (i + 1) % frames.length;
  }, 100);
}

function generateScopeId() {
  return `data-v-${Math.random().toString(36).substr(2, 9)}`;
}

function scopeCss(css, scopeId) {
  // Prefix all CSS selectors with the scope ID
  return css.replace(/([^{]+)\{/g, (match, selector) => {
    const scopedSelector = selector
      .split(",")
      .map((s) => `${s.trim()}[${scopeId}]`)
      .join(", ");
    return `${scopedSelector} {`;
  });
}

function compile() {
  const spinner = startAnimation();

  setTimeout(() => {
    clearInterval(spinner);

    log("Starting compilation...");

    try {
      let mainContent = fs.readFileSync(mainFilePath, "utf8");
      const importRegex = /import\s+(\w+)\s+from\s+["']\.\/pages\/(.+?)["'];?/g;
      let imports = {};
      let jsContent = "";
      let cssContent = "";

      let match;
      while ((match = importRegex.exec(mainContent)) !== null) {
        const [_, varName, fileName] = match;
        const filePath = path.join(pagesDir, fileName);
        if (fs.existsSync(filePath)) {
          let fileContent = fs.readFileSync(filePath, "utf8");
          const scriptMatch = fileContent.match(/<script>([\s\S]*?)<\/script>/);
          if (scriptMatch) {
            jsContent += scriptMatch[1].trim() + "\n";
            fileContent = fileContent.replace(scriptMatch[0], "");
          }

          // Check if <style> has the "scoped" attribute
          const styleMatch = fileContent.match(
            /<style\s*(scoped)?>([\s\S]*?)<\/style>/
          );
          if (styleMatch) {
            const isScoped = !!styleMatch[1]; // Check if "scoped" is present
            const css = styleMatch[2].trim();

            if (isScoped) {
              const scopeId = generateScopeId();
              const scopedCss = scopeCss(css, scopeId);
              cssContent += scopedCss + "\n";

              // Add scope ID to all root-level elements in the HTML
              let htmlContent = fileContent.replace(styleMatch[0], "").trim();

              // Modify all root-level elements to include the scope ID
              htmlContent = htmlContent.replace(
                /<([a-zA-Z][^>\s/]*)([^>]*)>/g, // Match only opening tags
                (match, tagName, attrs) =>
                  `<${tagName}${attrs ? " " + attrs.trim() : ""} ${scopeId}>`
              );

              fileContent = htmlContent;
            } else {
              // If not scoped, add the CSS as-is
              cssContent += css + "\n";
              fileContent = fileContent.replace(styleMatch[0], "").trim();
            }
          }

          imports[varName] = fileContent;
        } else {
          errorLog(`File "${filePath}" not found.`);
        }
      }

      for (const [varName, content] of Object.entries(imports)) {
        const componentRegex = new RegExp(`<${varName}\\s*/>`, "g");
        mainContent = mainContent.replace(componentRegex, content);
      }

      mainContent = mainContent.replace(importRegex, "");
      mainContent = mainContent.replace(/<script>\s*<\/script>/g, "");
      mainContent = mainContent.replace(
        "</head>",
        `\n  <link rel="stylesheet" href="styles.css">\n</head>`
      );
      mainContent = mainContent.replace(
        "</body>",
        `\n  <script src="index.js"></script>\n</body>`
      );

      fs.writeFileSync(outputHtmlPath, mainContent, "utf8");
      fs.writeFileSync(outputJsPath, jsContent, "utf8");
      fs.writeFileSync(outputCssPath, cssContent, "utf8");

      log("Compilation completed successfully!");
      console.log(
        `${colors.green("✔")} ${colors.bold("index.html")} generated`
      );
      console.log(`${colors.green("✔")} ${colors.bold("index.js")} generated`);
      console.log(
        `${colors.green("✔")} ${colors.bold("styles.css")} generated`
      );
    } catch (err) {
      errorLog(`An error occurred during compilation: ${err.message}`);
    }
  }, 1000); // Simulate a delay for animation
}

compile();

chokidar.watch([mainFilePath, pagesDir]).on("change", (filePath) => {
  log(
    `${colors.yellow("File changed:")} ${path.relative(currentDir, filePath)}`
  );
  compile();
});

console.log(
  `${colors.magenta("✨")} ${colors.bold("Compiler watching for changes...")}`
);
