#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const chokidar = require("chokidar");

// Resolve paths dynamically
const currentDir = process.cwd();
const pagesDir = path.join(currentDir, "pages");
const mainFilePath = path.join(currentDir, "main.html");
const outputDir = path.join(currentDir, "dist");

const outputHtmlPath = path.join(outputDir, "index.html");
const outputJsPath = path.join(outputDir, "index.js");
const outputCssPath = path.join(outputDir, "styles.css");

let imports = {}; // Store processed HTML content

function compile() {
  if (!fs.existsSync(mainFilePath)) {
    console.error(`‚ùå Error: "main.html" not found in ${currentDir}`);
    return;
  }

  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  let mainContent = fs.readFileSync(mainFilePath, "utf8");
  let jsContent = "";
  let cssContent = "";

  const importRegex = /import\s+(\w+)\s+from\s+["']\.\/pages\/(.+?)["'];?/g;
  let match;

  imports = {}; // Reset imports for each compilation

  while ((match = importRegex.exec(mainContent)) !== null) {
    const [_, varName, fileName] = match;
    const filePath = path.join(pagesDir, fileName);

    if (fs.existsSync(filePath)) {
      let fileContent = fs.readFileSync(filePath, "utf8");

      const scriptMatch = fileContent.match(/<script>([\s\S]*?)<\/script>/);
      if (scriptMatch) {
        jsContent += scriptMatch[1].trim() + "\n";
        fileContent = fileContent.replace(scriptMatch[0], "");
      }

      const styleMatch = fileContent.match(/<style>([\s\S]*?)<\/style>/);
      if (styleMatch) {
        cssContent += styleMatch[1].trim() + "\n";
        fileContent = fileContent.replace(styleMatch[0], "");
      }

      imports[varName] = fileContent;
    } else {
      console.error(`‚ùå Error: File "${filePath}" not found.`);
    }
  }

  for (const [varName, content] of Object.entries(imports)) {
    const componentRegex = new RegExp(`<${varName}\\s*/>`, "g");
    mainContent = mainContent.replace(componentRegex, content);
  }

  // Remove any unnecessary blank lines after replacing components
  mainContent = mainContent.replace(/\n\s*\n/g, "\n");

  mainContent = mainContent.replace(importRegex, "");
  mainContent = mainContent.replace(/<script>\s*<\/script>/g, "");

  // Ensure the correct placement of the styles and scripts
  mainContent = mainContent.replace(
    "</head>",
    `\n  <link rel="stylesheet" href="styles.css">\n</head>`
  );
  mainContent = mainContent.replace(
    "</body>",
    `\n  <script src="index.js"></script>\n</body>`
  );

  // Write the compiled files to the output directory
  fs.writeFileSync(outputHtmlPath, mainContent, "utf8");
  fs.writeFileSync(outputJsPath, jsContent, "utf8");
  fs.writeFileSync(outputCssPath, cssContent, "utf8");

  console.log("‚úÖ Compilation completed! Files generated in 'dist' folder:");
  console.log("- dist/index.html ‚úÖ");
  console.log("- dist/index.js ‚úÖ (JavaScript from all pages)");
  console.log("- dist/styles.css ‚úÖ (CSS from all pages)");
}

// Initial compilation
compile();

// Watch for file changes
const watcher = chokidar.watch([pagesDir, mainFilePath], {
  ignored: /(^|[\/\\])\../, // Ignore dotfiles
  persistent: true,
});

watcher
  .on("add", (filePath) => {
    console.log(`File ${filePath} has been added`);
    compile();
  })
  .on("change", (filePath) => {
    console.log(`File ${filePath} has been changed`);
    compile();
  })
  .on("unlink", (filePath) => {
    console.log(`File ${filePath} has been removed`);
    compile();
  })
  .on("error", (error) => console.error(`Watcher error: ${error}`));

console.log("üëÄ Watching for file changes...");
